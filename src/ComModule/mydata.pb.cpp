// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mydata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mydata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace manip {

namespace {

const ::google::protobuf::Descriptor* PCsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PCsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TacMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TacMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkerPointsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkerPointsMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mydata_2eproto() {
  protobuf_AddDesc_mydata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mydata.proto");
  GOOGLE_CHECK(file != NULL);
  PCsMsg_descriptor_ = file->message_type(0);
  static const int PCsMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCsMsg, cpposition3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCsMsg, cppositionobject3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCsMsg, cpnormalvector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCsMsg, cpnormalobjectvector_),
  };
  PCsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PCsMsg_descriptor_,
      PCsMsg::default_instance_,
      PCsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PCsMsg));
  TacMsg_descriptor_ = file->message_type(1);
  static const int TacMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, cpposition2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, contactflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, contactnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, contactforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, contactorien_),
  };
  TacMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TacMsg_descriptor_,
      TacMsg::default_instance_,
      TacMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TacMsg));
  VisMsg_descriptor_ = file->message_type(2);
  static const int VisMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisMsg, objposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisMsg, objorien_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisMsg, objnum_),
  };
  VisMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisMsg_descriptor_,
      VisMsg::default_instance_,
      VisMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisMsg));
  RobotMsg_descriptor_ = file->message_type(3);
  static const int RobotMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMsg, orien_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMsg, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMsg, ft_),
  };
  RobotMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotMsg_descriptor_,
      RobotMsg::default_instance_,
      RobotMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotMsg));
  MarkerPointsMsg_descriptor_ = file->message_type(4);
  static const int MarkerPointsMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerPointsMsg, markernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerPointsMsg, position3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerPointsMsg, normalvector_),
  };
  MarkerPointsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarkerPointsMsg_descriptor_,
      MarkerPointsMsg::default_instance_,
      MarkerPointsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerPointsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerPointsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarkerPointsMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mydata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PCsMsg_descriptor_, &PCsMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TacMsg_descriptor_, &TacMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisMsg_descriptor_, &VisMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotMsg_descriptor_, &RobotMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarkerPointsMsg_descriptor_, &MarkerPointsMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mydata_2eproto() {
  delete PCsMsg::default_instance_;
  delete PCsMsg_reflection_;
  delete TacMsg::default_instance_;
  delete TacMsg_reflection_;
  delete VisMsg::default_instance_;
  delete VisMsg_reflection_;
  delete RobotMsg::default_instance_;
  delete RobotMsg_reflection_;
  delete MarkerPointsMsg::default_instance_;
  delete MarkerPointsMsg_reflection_;
}

void protobuf_AddDesc_mydata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mydata.proto\022\005manip\"\200\001\n\006PCsMsg\022\030\n\014CPPo"
    "sition3D\030\001 \003(\002B\002\020\001\022\036\n\022CPPositionObject3D"
    "\030\002 \003(\002B\002\020\001\022\032\n\016CPNormalVector\030\003 \003(\002B\002\020\001\022 "
    "\n\024CPNormalObjectVector\030\004 \003(\002B\002\020\001\"w\n\006TacM"
    "sg\022\030\n\014CPPosition2D\030\001 \003(\002B\002\020\001\022\023\n\013contactf"
    "lag\030\002 \002(\010\022\022\n\ncontactnum\030\003 \002(\005\022\024\n\014contact"
    "force\030\004 \002(\002\022\024\n\014contactorien\030\005 \002(\002\"G\n\006Vis"
    "Msg\022\027\n\013ObjPosition\030\001 \003(\002B\002\020\001\022\024\n\010ObjOrien"
    "\030\002 \003(\002B\002\020\001\022\016\n\006Objnum\030\003 \002(\005\"C\n\010RobotMsg\022\021"
    "\n\005orien\030\001 \003(\002B\002\020\001\022\024\n\010position\030\002 \003(\002B\002\020\001\022"
    "\016\n\002ft\030\003 \003(\002B\002\020\001\"V\n\017MarkerPointsMsg\022\021\n\tma"
    "rkernum\030\001 \002(\005\022\026\n\nposition3D\030\002 \003(\002B\002\020\001\022\030\n"
    "\014normalvector\030\003 \003(\002B\002\020\001", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mydata.proto", &protobuf_RegisterTypes);
  PCsMsg::default_instance_ = new PCsMsg();
  TacMsg::default_instance_ = new TacMsg();
  VisMsg::default_instance_ = new VisMsg();
  RobotMsg::default_instance_ = new RobotMsg();
  MarkerPointsMsg::default_instance_ = new MarkerPointsMsg();
  PCsMsg::default_instance_->InitAsDefaultInstance();
  TacMsg::default_instance_->InitAsDefaultInstance();
  VisMsg::default_instance_->InitAsDefaultInstance();
  RobotMsg::default_instance_->InitAsDefaultInstance();
  MarkerPointsMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mydata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mydata_2eproto {
  StaticDescriptorInitializer_mydata_2eproto() {
    protobuf_AddDesc_mydata_2eproto();
  }
} static_descriptor_initializer_mydata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PCsMsg::kCPPosition3DFieldNumber;
const int PCsMsg::kCPPositionObject3DFieldNumber;
const int PCsMsg::kCPNormalVectorFieldNumber;
const int PCsMsg::kCPNormalObjectVectorFieldNumber;
#endif  // !_MSC_VER

PCsMsg::PCsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PCsMsg::InitAsDefaultInstance() {
}

PCsMsg::PCsMsg(const PCsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PCsMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PCsMsg::~PCsMsg() {
  SharedDtor();
}

void PCsMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PCsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PCsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PCsMsg_descriptor_;
}

const PCsMsg& PCsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydata_2eproto();
  return *default_instance_;
}

PCsMsg* PCsMsg::default_instance_ = NULL;

PCsMsg* PCsMsg::New() const {
  return new PCsMsg;
}

void PCsMsg::Clear() {
  cpposition3d_.Clear();
  cppositionobject3d_.Clear();
  cpnormalvector_.Clear();
  cpnormalobjectvector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PCsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float CPPosition3D = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cpposition3d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_cpposition3d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CPPositionObject3D;
        break;
      }

      // repeated float CPPositionObject3D = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CPPositionObject3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cppositionobject3d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_cppositionobject3d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CPNormalVector;
        break;
      }

      // repeated float CPNormalVector = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CPNormalVector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cpnormalvector())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_cpnormalvector())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CPNormalObjectVector;
        break;
      }

      // repeated float CPNormalObjectVector = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CPNormalObjectVector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cpnormalobjectvector())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_cpnormalobjectvector())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PCsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float CPPosition3D = 1 [packed = true];
  if (this->cpposition3d_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cpposition3d_cached_byte_size_);
  }
  for (int i = 0; i < this->cpposition3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->cpposition3d(i), output);
  }

  // repeated float CPPositionObject3D = 2 [packed = true];
  if (this->cppositionobject3d_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cppositionobject3d_cached_byte_size_);
  }
  for (int i = 0; i < this->cppositionobject3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->cppositionobject3d(i), output);
  }

  // repeated float CPNormalVector = 3 [packed = true];
  if (this->cpnormalvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cpnormalvector_cached_byte_size_);
  }
  for (int i = 0; i < this->cpnormalvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->cpnormalvector(i), output);
  }

  // repeated float CPNormalObjectVector = 4 [packed = true];
  if (this->cpnormalobjectvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cpnormalobjectvector_cached_byte_size_);
  }
  for (int i = 0; i < this->cpnormalobjectvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->cpnormalobjectvector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PCsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float CPPosition3D = 1 [packed = true];
  if (this->cpposition3d_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cpposition3d_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cpposition3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cpposition3d(i), target);
  }

  // repeated float CPPositionObject3D = 2 [packed = true];
  if (this->cppositionobject3d_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cppositionobject3d_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cppositionobject3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cppositionobject3d(i), target);
  }

  // repeated float CPNormalVector = 3 [packed = true];
  if (this->cpnormalvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cpnormalvector_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cpnormalvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cpnormalvector(i), target);
  }

  // repeated float CPNormalObjectVector = 4 [packed = true];
  if (this->cpnormalobjectvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cpnormalobjectvector_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cpnormalobjectvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cpnormalobjectvector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PCsMsg::ByteSize() const {
  int total_size = 0;

  // repeated float CPPosition3D = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->cpposition3d_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cpposition3d_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float CPPositionObject3D = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->cppositionobject3d_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cppositionobject3d_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float CPNormalVector = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->cpnormalvector_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cpnormalvector_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float CPNormalObjectVector = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->cpnormalobjectvector_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cpnormalobjectvector_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PCsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PCsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PCsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PCsMsg::MergeFrom(const PCsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpposition3d_.MergeFrom(from.cpposition3d_);
  cppositionobject3d_.MergeFrom(from.cppositionobject3d_);
  cpnormalvector_.MergeFrom(from.cpnormalvector_);
  cpnormalobjectvector_.MergeFrom(from.cpnormalobjectvector_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PCsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCsMsg::CopyFrom(const PCsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCsMsg::IsInitialized() const {

  return true;
}

void PCsMsg::Swap(PCsMsg* other) {
  if (other != this) {
    cpposition3d_.Swap(&other->cpposition3d_);
    cppositionobject3d_.Swap(&other->cppositionobject3d_);
    cpnormalvector_.Swap(&other->cpnormalvector_);
    cpnormalobjectvector_.Swap(&other->cpnormalobjectvector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PCsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PCsMsg_descriptor_;
  metadata.reflection = PCsMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TacMsg::kCPPosition2DFieldNumber;
const int TacMsg::kContactflagFieldNumber;
const int TacMsg::kContactnumFieldNumber;
const int TacMsg::kContactforceFieldNumber;
const int TacMsg::kContactorienFieldNumber;
#endif  // !_MSC_VER

TacMsg::TacMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TacMsg::InitAsDefaultInstance() {
}

TacMsg::TacMsg(const TacMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TacMsg::SharedCtor() {
  _cached_size_ = 0;
  contactflag_ = false;
  contactnum_ = 0;
  contactforce_ = 0;
  contactorien_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TacMsg::~TacMsg() {
  SharedDtor();
}

void TacMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TacMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TacMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TacMsg_descriptor_;
}

const TacMsg& TacMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydata_2eproto();
  return *default_instance_;
}

TacMsg* TacMsg::default_instance_ = NULL;

TacMsg* TacMsg::New() const {
  return new TacMsg;
}

void TacMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    contactflag_ = false;
    contactnum_ = 0;
    contactforce_ = 0;
    contactorien_ = 0;
  }
  cpposition2d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TacMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float CPPosition2D = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cpposition2d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_cpposition2d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contactflag;
        break;
      }

      // required bool contactflag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contactflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contactflag_)));
          set_has_contactflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contactnum;
        break;
      }

      // required int32 contactnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contactnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contactnum_)));
          set_has_contactnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_contactforce;
        break;
      }

      // required float contactforce = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contactforce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contactforce_)));
          set_has_contactforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_contactorien;
        break;
      }

      // required float contactorien = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contactorien:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contactorien_)));
          set_has_contactorien();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TacMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float CPPosition2D = 1 [packed = true];
  if (this->cpposition2d_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cpposition2d_cached_byte_size_);
  }
  for (int i = 0; i < this->cpposition2d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->cpposition2d(i), output);
  }

  // required bool contactflag = 2;
  if (has_contactflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->contactflag(), output);
  }

  // required int32 contactnum = 3;
  if (has_contactnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contactnum(), output);
  }

  // required float contactforce = 4;
  if (has_contactforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->contactforce(), output);
  }

  // required float contactorien = 5;
  if (has_contactorien()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->contactorien(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TacMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float CPPosition2D = 1 [packed = true];
  if (this->cpposition2d_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cpposition2d_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cpposition2d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cpposition2d(i), target);
  }

  // required bool contactflag = 2;
  if (has_contactflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->contactflag(), target);
  }

  // required int32 contactnum = 3;
  if (has_contactnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contactnum(), target);
  }

  // required float contactforce = 4;
  if (has_contactforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->contactforce(), target);
  }

  // required float contactorien = 5;
  if (has_contactorien()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->contactorien(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TacMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool contactflag = 2;
    if (has_contactflag()) {
      total_size += 1 + 1;
    }

    // required int32 contactnum = 3;
    if (has_contactnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contactnum());
    }

    // required float contactforce = 4;
    if (has_contactforce()) {
      total_size += 1 + 4;
    }

    // required float contactorien = 5;
    if (has_contactorien()) {
      total_size += 1 + 4;
    }

  }
  // repeated float CPPosition2D = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->cpposition2d_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cpposition2d_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TacMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TacMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TacMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TacMsg::MergeFrom(const TacMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpposition2d_.MergeFrom(from.cpposition2d_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_contactflag()) {
      set_contactflag(from.contactflag());
    }
    if (from.has_contactnum()) {
      set_contactnum(from.contactnum());
    }
    if (from.has_contactforce()) {
      set_contactforce(from.contactforce());
    }
    if (from.has_contactorien()) {
      set_contactorien(from.contactorien());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TacMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TacMsg::CopyFrom(const TacMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TacMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void TacMsg::Swap(TacMsg* other) {
  if (other != this) {
    cpposition2d_.Swap(&other->cpposition2d_);
    std::swap(contactflag_, other->contactflag_);
    std::swap(contactnum_, other->contactnum_);
    std::swap(contactforce_, other->contactforce_);
    std::swap(contactorien_, other->contactorien_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TacMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TacMsg_descriptor_;
  metadata.reflection = TacMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisMsg::kObjPositionFieldNumber;
const int VisMsg::kObjOrienFieldNumber;
const int VisMsg::kObjnumFieldNumber;
#endif  // !_MSC_VER

VisMsg::VisMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisMsg::InitAsDefaultInstance() {
}

VisMsg::VisMsg(const VisMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisMsg::SharedCtor() {
  _cached_size_ = 0;
  objnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisMsg::~VisMsg() {
  SharedDtor();
}

void VisMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisMsg_descriptor_;
}

const VisMsg& VisMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydata_2eproto();
  return *default_instance_;
}

VisMsg* VisMsg::default_instance_ = NULL;

VisMsg* VisMsg::New() const {
  return new VisMsg;
}

void VisMsg::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    objnum_ = 0;
  }
  objposition_.Clear();
  objorien_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float ObjPosition = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_objposition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_objposition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ObjOrien;
        break;
      }

      // repeated float ObjOrien = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ObjOrien:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_objorien())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_objorien())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Objnum;
        break;
      }

      // required int32 Objnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Objnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objnum_)));
          set_has_objnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float ObjPosition = 1 [packed = true];
  if (this->objposition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_objposition_cached_byte_size_);
  }
  for (int i = 0; i < this->objposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->objposition(i), output);
  }

  // repeated float ObjOrien = 2 [packed = true];
  if (this->objorien_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_objorien_cached_byte_size_);
  }
  for (int i = 0; i < this->objorien_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->objorien(i), output);
  }

  // required int32 Objnum = 3;
  if (has_objnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float ObjPosition = 1 [packed = true];
  if (this->objposition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _objposition_cached_byte_size_, target);
  }
  for (int i = 0; i < this->objposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->objposition(i), target);
  }

  // repeated float ObjOrien = 2 [packed = true];
  if (this->objorien_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _objorien_cached_byte_size_, target);
  }
  for (int i = 0; i < this->objorien_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->objorien(i), target);
  }

  // required int32 Objnum = 3;
  if (has_objnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 Objnum = 3;
    if (has_objnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objnum());
    }

  }
  // repeated float ObjPosition = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->objposition_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _objposition_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float ObjOrien = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->objorien_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _objorien_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisMsg::MergeFrom(const VisMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  objposition_.MergeFrom(from.objposition_);
  objorien_.MergeFrom(from.objorien_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_objnum()) {
      set_objnum(from.objnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisMsg::CopyFrom(const VisMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void VisMsg::Swap(VisMsg* other) {
  if (other != this) {
    objposition_.Swap(&other->objposition_);
    objorien_.Swap(&other->objorien_);
    std::swap(objnum_, other->objnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisMsg_descriptor_;
  metadata.reflection = VisMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotMsg::kOrienFieldNumber;
const int RobotMsg::kPositionFieldNumber;
const int RobotMsg::kFtFieldNumber;
#endif  // !_MSC_VER

RobotMsg::RobotMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotMsg::InitAsDefaultInstance() {
}

RobotMsg::RobotMsg(const RobotMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotMsg::~RobotMsg() {
  SharedDtor();
}

void RobotMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotMsg_descriptor_;
}

const RobotMsg& RobotMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydata_2eproto();
  return *default_instance_;
}

RobotMsg* RobotMsg::default_instance_ = NULL;

RobotMsg* RobotMsg::New() const {
  return new RobotMsg;
}

void RobotMsg::Clear() {
  orien_.Clear();
  position_.Clear();
  ft_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float orien = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_orien())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_orien())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // repeated float position = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ft;
        break;
      }

      // repeated float ft = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ft())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_ft())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float orien = 1 [packed = true];
  if (this->orien_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orien_cached_byte_size_);
  }
  for (int i = 0; i < this->orien_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->orien(i), output);
  }

  // repeated float position = 2 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position(i), output);
  }

  // repeated float ft = 3 [packed = true];
  if (this->ft_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ft_cached_byte_size_);
  }
  for (int i = 0; i < this->ft_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->ft(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float orien = 1 [packed = true];
  if (this->orien_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orien_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orien_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->orien(i), target);
  }

  // repeated float position = 2 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position(i), target);
  }

  // repeated float ft = 3 [packed = true];
  if (this->ft_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ft_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ft_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ft(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotMsg::ByteSize() const {
  int total_size = 0;

  // repeated float orien = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->orien_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orien_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float position = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float ft = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->ft_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ft_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotMsg::MergeFrom(const RobotMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  orien_.MergeFrom(from.orien_);
  position_.MergeFrom(from.position_);
  ft_.MergeFrom(from.ft_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMsg::CopyFrom(const RobotMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMsg::IsInitialized() const {

  return true;
}

void RobotMsg::Swap(RobotMsg* other) {
  if (other != this) {
    orien_.Swap(&other->orien_);
    position_.Swap(&other->position_);
    ft_.Swap(&other->ft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotMsg_descriptor_;
  metadata.reflection = RobotMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarkerPointsMsg::kMarkernumFieldNumber;
const int MarkerPointsMsg::kPosition3DFieldNumber;
const int MarkerPointsMsg::kNormalvectorFieldNumber;
#endif  // !_MSC_VER

MarkerPointsMsg::MarkerPointsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarkerPointsMsg::InitAsDefaultInstance() {
}

MarkerPointsMsg::MarkerPointsMsg(const MarkerPointsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarkerPointsMsg::SharedCtor() {
  _cached_size_ = 0;
  markernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkerPointsMsg::~MarkerPointsMsg() {
  SharedDtor();
}

void MarkerPointsMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarkerPointsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkerPointsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkerPointsMsg_descriptor_;
}

const MarkerPointsMsg& MarkerPointsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydata_2eproto();
  return *default_instance_;
}

MarkerPointsMsg* MarkerPointsMsg::default_instance_ = NULL;

MarkerPointsMsg* MarkerPointsMsg::New() const {
  return new MarkerPointsMsg;
}

void MarkerPointsMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    markernum_ = 0;
  }
  position3d_.Clear();
  normalvector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarkerPointsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 markernum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markernum_)));
          set_has_markernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position3D;
        break;
      }

      // repeated float position3D = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position3d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_position3d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_normalvector;
        break;
      }

      // repeated float normalvector = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalvector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_normalvector())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_normalvector())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarkerPointsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 markernum = 1;
  if (has_markernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->markernum(), output);
  }

  // repeated float position3D = 2 [packed = true];
  if (this->position3d_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position3d_cached_byte_size_);
  }
  for (int i = 0; i < this->position3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->position3d(i), output);
  }

  // repeated float normalvector = 3 [packed = true];
  if (this->normalvector_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_normalvector_cached_byte_size_);
  }
  for (int i = 0; i < this->normalvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->normalvector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarkerPointsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 markernum = 1;
  if (has_markernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->markernum(), target);
  }

  // repeated float position3D = 2 [packed = true];
  if (this->position3d_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position3d_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position3d(i), target);
  }

  // repeated float normalvector = 3 [packed = true];
  if (this->normalvector_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _normalvector_cached_byte_size_, target);
  }
  for (int i = 0; i < this->normalvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->normalvector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarkerPointsMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 markernum = 1;
    if (has_markernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markernum());
    }

  }
  // repeated float position3D = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->position3d_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position3d_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float normalvector = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->normalvector_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _normalvector_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkerPointsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarkerPointsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarkerPointsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarkerPointsMsg::MergeFrom(const MarkerPointsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  position3d_.MergeFrom(from.position3d_);
  normalvector_.MergeFrom(from.normalvector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_markernum()) {
      set_markernum(from.markernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarkerPointsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerPointsMsg::CopyFrom(const MarkerPointsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerPointsMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarkerPointsMsg::Swap(MarkerPointsMsg* other) {
  if (other != this) {
    std::swap(markernum_, other->markernum_);
    position3d_.Swap(&other->position3d_);
    normalvector_.Swap(&other->normalvector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarkerPointsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkerPointsMsg_descriptor_;
  metadata.reflection = MarkerPointsMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace manip

// @@protoc_insertion_point(global_scope)
